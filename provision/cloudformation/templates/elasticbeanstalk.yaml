---
AWSTemplateFormatVersion: 2010-09-09
Description: Elastic Beanstalk

Parameters:

  ApplicationName:
    Description: Name of your application
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  SolutionStackName:
    Description: Solution stack name
    Type: String
    MinLength: 1
    MaxLength: 255

  EnvironmentName:
    Description: Environment name
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedValues:
      - dev
      - prod

  NetworkStackName:
    Description: Name of an active CloudFormation stack of networking resources
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  AppS3Bucket:
    Description: S3 Bucket containing your application package.
    Type: String
    MinLength: 1
    MaxLength: 255

  AppS3Key:
    Description: S3 Bucket key for your application package
    Type: String
    MinLength: 1
    MaxLength: 255

  InstanceType:
    Description: The instance type
    Type: String
    MinLength: 1
    MaxLength: 255
    Default: t2.micro

  SSLCertificateArn:
    Description: The SSL/TLS certificate ARN
    Type: String
    MinLength: 0
    MaxLength: 2048
    Default: ""

  AutoScalingMinInstanceCount:
    Description: Minimum number of EC2 instances for Auto Scaling
    Type: Number
    MinValue: 1
    MaxValue: 20
    Default: 2
    ConstraintDescription: Specify a number between 1 - 20

  AutoScalingMaxInstanceCount:
    Description: Maximum number of EC2 instances for Auto Scaling
    Type: Number
    MinValue: 1
    MaxValue: 20
    Default: 6
    ConstraintDescription: Specify a number between 1 - 20

Conditions:

  TlsEnabled: !Not [ !Equals [ !Ref SSLCertificateArn, "" ] ]

Resources:

  ElasticBeanstalkServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "elasticbeanstalk.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService

  Application:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Ref ApplicationName

  ApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref Application
      SourceBundle:
        S3Bucket: !Ref AppS3Bucket
        S3Key: !Ref AppS3Key

  Environment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      EnvironmentName: !Sub "${ApplicationName}-${EnvironmentName}"
      ApplicationName: !Ref Application
      TemplateName: !Ref ConfigurationTemplate
      VersionLabel: !Ref ApplicationVersion
    DependsOn:
      - ConfigurationTemplate
      - ApplicationVersion

  ConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref Application
      ApplicationName: !Ref ApplicationName
      SolutionStackName: !Ref SolutionStackName
      OptionSettings:

        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value: LoadBalanced

        - Namespace: aws:elasticbeanstalk:environment
          OptionName: LoadBalancerType
          Value: application

        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: !Ref ElasticBeanstalkServiceRole

          # AUTOSCALING OPTIONS
        - Namespace: aws:autoscaling:asg
          OptionName: MinSize
          Value: !Ref AutoScalingMinInstanceCount

        - Namespace: aws:autoscaling:asg
          OptionName: MaxSize
          Value: !Ref AutoScalingMaxInstanceCount

        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: SecurityGroups
          Value:
            Fn::ImportValue: !Sub "${NetworkStackName}-AppSecurityGroupID"

        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: !Ref InstanceType

        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !Ref AppInstanceProfile

        - Namespace: aws:autoscaling:updatepolicy:rollingupdate
          OptionName: RollingUpdateEnabled
          Value: true

        - Namespace: aws:autoscaling:updatepolicy:rollingupdate
          OptionName: RollingUpdateType
          Value: Health

        - Namespace: aws:autoscaling:trigger
          OptionName: MeasureName
          Value: CPUUtilization

        - Namespace: aws:autoscaling:trigger
          OptionName: Unit
          Value: Percent

        - Namespace: aws:autoscaling:trigger
          OptionName: UpperThreshold
          Value: 80

        - Namespace: aws:autoscaling:trigger
          OptionName: LowerThreshold
          Value: 40

        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value:
            Fn::ImportValue: !Sub "${NetworkStackName}-VpcID"

        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value:
            "Fn::Join":
              - ','
              - - !ImportValue
                  "Fn::Sub": "${NetworkStackName}-PrivateSubnet1ID"
                - !ImportValue
                  "Fn::Sub": "${NetworkStackName}-PrivateSubnet2ID"

        - Namespace: aws:ec2:vpc
          OptionName: ELBSubnets
          Value:
            "Fn::Join":
              - ','
              - - !ImportValue
                  "Fn::Sub": "${NetworkStackName}-PublicSubnet1ID"
                - !ImportValue
                  "Fn::Sub": "${NetworkStackName}-PublicSubnet2ID"

        - Namespace: aws:elbv2:loadbalancer
          OptionName: SecurityGroups
          Value:
            Fn::ImportValue: !Sub "${NetworkStackName}-ELBSecurityGroupID"

        - Namespace: aws:elbv2:loadbalancer
          OptionName: ManagedSecurityGroup
          Value:
            Fn::ImportValue: !Sub "${NetworkStackName}-ELBSecurityGroupID"

        - Namespace: aws:elbv2:listenerrule:default
          OptionName: PathPatterns
          Value: "/*"

        - Namespace: !Sub
            - "aws:elbv2:listener:${ListenPort}"
            - ListenPort:
                "Fn::ImportValue": !Sub "${NetworkStackName}-ELBIngressPort"
          OptionName: Protocol
          Value: !If [ TlsEnabled, HTTPS, HTTP ]

        - Namespace: !Sub
            - "aws:elbv2:listener:${ListenPort}"
            - ListenPort:
                "Fn::ImportValue": !Sub "${NetworkStackName}-ELBIngressPort"
          OptionName: Rules
          Value: default

        - Namespace: !Sub
            - "aws:elbv2:listener:${ListenPort}"
            - ListenPort:
                "Fn::ImportValue": !Sub "${NetworkStackName}-ELBIngressPort"
          OptionName: SSLCertificateArns
          Value: !Ref SSLCertificateArn

        - Namespace: aws:elasticbeanstalk:cloudwatch:logs
          OptionName: StreamLogs
          Value: true

        - Namespace: aws:elasticbeanstalk:cloudwatch:logs
          OptionName: DeleteOnTerminate
          Value: true

        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: AWS_REGION
          Value: !Ref AWS::Region

  # IAM resources
  AppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  AppPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: App
      Roles:
        - !Ref AppRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action: "*"
            Resource: "*"

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref AppRole

Outputs:

  Name:
    Description: Elastic Beanstalk Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name

  EnvironmentURL:
    Description: Environment URL
    Value: !GetAtt Environment.EndpointURL
    Export:
      Name: !Sub "${AWS::StackName}-EnvironmentURL"

  EnvironmentName:
    Description: Environment Name
    Value: !Sub "${ApplicationName}-${EnvironmentName}"
    Export:
      Name: !Sub "${AWS::StackName}-EnvironmentName"

  TypeOfStack:
    Description: Stack type
    Value: !Ref SolutionStackName
    Export:
      Name: !Sub "${AWS::StackName}-TypeOfStack"

